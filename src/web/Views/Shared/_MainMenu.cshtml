@using EPiServer
@using EPiServer.Commerce.Catalog.ContentTypes
@using EPiServer.Commerce.Catalog.Linking
@using EPiServer.Core
@using EPiServer.ServiceLocation
@using EPiServer.Web.Routing
@using OxxCommerceStarterKit.Core.Extensions
@using OxxCommerceStarterKit.Web.Helpers
@using OxxCommerceStarterKit.Web.Models.PageTypes

@{
    Layout = null;
    int max = ViewData["Max"] != null ? (int)ViewData["Max"] : 0;

}

@if (Model != null)
{
    <ul class="catalog">
        @Html.MenuList(ContentReference.StartPage, ItemTemplate, max)
    </ul>
}

@helper ItemTemplate(HtmlHelpers.MenuItem firstLevelItem)
{
    bool hasChildren = firstLevelItem.HasChildren.Value;
    <li class="@(firstLevelItem.Selected ? "active" : "") @(hasChildren ? "has-submenu" : "")">
        @if (hasChildren)
        {
            <a href="javascript:;">@firstLevelItem.Page.Name <i class="fa fa-chevron-down"></i></a>
            <ul class="submenu">
                @Html.MenuList(firstLevelItem.Page.ContentLink, SubLevelItemTemplate)
                @MenuFeatureProduct(firstLevelItem.Page)
            </ul>
        }
        else
        {
            @Link(firstLevelItem.Page)
        }
    </li>
}

@helper SubLevelItemTemplate(HtmlHelpers.MenuItem subLevelItem)
{
    bool hasChildren = subLevelItem.HasChildren.Value;
    if (hasChildren)
    {
        <li class="@(subLevelItem.Selected ? "active" : null) has-submenu">
            @Link(subLevelItem.Page)

            <ul class="sub-submenu">
                @Html.MenuList(subLevelItem.Page.ContentLink, SubLevelItemTemplate)
            </ul>

        </li>
    }
    else
    {
        <li> @Link(subLevelItem.Page)</li>
    }
}


@helper Link(PageData page)
{
    @Html.PageLink(page)
}

@helper MenuFeatureProduct(PageData page)
{
    var featurePage = page as IHasFeatureProduct;

    if (featurePage != null && featurePage.FeatureProduct != null && ContentReference.IsNullOrEmpty(featurePage.FeatureProduct.MenuFeatureLink) == false)
    {
        var contentLoader = ServiceLocator.Current.GetInstance<EPiServer.IContentLoader>();
        UrlResolver urlResolver = ServiceLocator.Current.GetInstance<UrlResolver>();
        EntryContentBase product = contentLoader.Get<EntryContentBase>(featurePage.FeatureProduct.MenuFeatureLink);
        <li class="offer">
            <div class="col-1">
                <p class="p-style2">@featurePage.FeatureProduct.MenuFeatureText</p>
            </div>
            <div class="col-2">
                @SetImageTag(product, urlResolver)
                @CreateButton(product, featurePage.FeatureProduct.MenuFeatureActionText, contentLoader, urlResolver)
            </div>
        </li>
    }
    else
    {
        <li class="offer">
            <div class="col-1">
            </div>
            <div class="col-2">
            </div>
        </li>
    }

}
@helper SetImageTag(EntryContentBase product, UrlResolver urlResolver)
{

    var mediaUrl = product.GetImage(preset: null, groupName: "menufeature");
    if (string.IsNullOrEmpty(mediaUrl))
    {
        // Fall back to default image, force size and aspect ratio
        mediaUrl = product.GetImage(preset: "menufeature");
    }
    
    if (string.IsNullOrEmpty(mediaUrl) == false)
    {
        <img src="@mediaUrl" alt="Special Offer" />
    }
    else
    {
        <div>@product.DisplayName</div>
    }

}
@helper CreateButton(EntryContentBase entry, string menuFeatureActionText, IContentLoader contentLoader, UrlResolver urlResolver)
{

    string displayPrice = string.Empty;
    if(string.IsNullOrEmpty(menuFeatureActionText))
    {
        menuFeatureActionText = "Read More";
    }
    VariationContent variation = null;
    if (entry is VariationContent)
    {
        variation = entry as VariationContent;

    }
    else
    {
        var LinksRepository = ServiceLocator.Current.GetInstance<ILinksRepository>();

        var relationsBySource = LinksRepository.GetRelationsBySource(entry.ContentLink)
            .OfType<ProductVariation>();

        variation = contentLoader.GetItems(
            relationsBySource.Select(r => r.Target), LanguageSelector.AutoDetect())
            .OfType<VariationContent>().FirstOrDefault();

    }
    if (variation != null)
    {
        var priceModel = variation.GetPriceModel();
        displayPrice = priceModel.Price.UnitPrice.ToString(System.Globalization.CultureInfo.CurrentCulture);
        var buttonText = string.Format(menuFeatureActionText, displayPrice);
        <a class="btn btn-block" href="@urlResolver.GetUrl(entry.ContentLink)">@buttonText</a>
    }


}

